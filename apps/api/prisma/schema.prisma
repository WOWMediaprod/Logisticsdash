generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Company {
  id             String             @id @default(cuid())
  name           String
  settings       Json               @default("{}")
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  bills          Bill[]
  clients        Client[]
  containers     Container[]
  documents      Document[]
  drivers        Driver[]
  rateCards      RateCard[]
  jobEconomics   JobEconomics[]
  jobRequests    JobRequest[]
  jobs           Job[]
  notifications  Notification[]
  routes         Route[]
  users          User[]
  vehicles       Vehicle[]
  sessions       DriverSession[]
  earnings       DriverEarning[]
  trackingStates TrackingState[]

  @@index([name])
  @@map("companies")
}

model User {
  id                       String                 @id @default(cuid())
  companyId                String
  email                    String                 @unique
  firstName                String
  lastName                 String
  role                     String
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  company                  Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdDocuments         Document[]             @relation("CreatedBy")
  assignedJobs             Job[]                  @relation("AssignedBy")
  jobRequestDocuments      JobRequestDocument[]
  jobRequestUpdates        JobRequestUpdate[]
  jobUpdates               JobUpdate[]
  notificationPreferences  NotificationSettings?
  triggeredMaintenanceAlerts MaintenanceAlert[]

  @@index([companyId])
  @@index([email])
  @@map("users")
}

model Vehicle {
  id             String             @id @default(cuid())
  companyId      String
  regNo          String
  class          String
  make           String?
  model          String?
  year           Int?
  kmpl           Float?             @default(8.0)
  leasePerDay    Decimal?           @db.Decimal(10, 2)
  maintPerKm     Decimal?           @db.Decimal(10, 4)
  currentOdo     Int                @default(0)
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  fuelRecords    FuelRecord[]
  jobs           Job[]
  locationTracks LocationTracking[]
  maintenance    MaintenanceEvent[]
  company        Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, regNo])
  @@index([companyId])
  @@index([isActive])
  @@map("vehicles")
}

model Driver {
  id                  String             @id @default(cuid())
  companyId           String
  name                String
  licenseNo           String?
  phone               String?
  email               String?
  pin                 String?            @db.VarChar(6)
  lastLoginAt         DateTime?
  deviceInfo          Json?
  totalEarnings       Decimal?           @default(0) @db.Decimal(12, 2)
  monthlyEarnings     Decimal?           @default(0) @db.Decimal(12, 2)
  currentJobId        String?
  isOnline            Boolean            @default(false)
  lastLocationLat     Decimal?           @db.Decimal(10, 8)
  lastLocationLng     Decimal?           @db.Decimal(11, 8)
  lastLocationUpdate  DateTime?
  isActive            Boolean            @default(true)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  company             Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  geofenceEvents      GeofenceEvent[]
  jobs                Job[]
  locationTracks      LocationTracking[]
  sessions            DriverSession[]
  earnings            DriverEarning[]
  trackingState       TrackingState?

  @@unique([companyId, licenseNo])
  @@index([companyId])
  @@index([isActive])
  @@index([companyId, licenseNo, pin], map: "idx_driver_auth")
  @@index([companyId, isOnline], map: "idx_driver_online")
  @@index([currentJobId], map: "idx_driver_current_job")
  @@map("drivers")
}

model Client {
  id          String       @id @default(cuid())
  companyId   String
  name        String
  code        String?
  terms       String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobRequests JobRequest[]
  jobs        Job[]
  rateCards   RateCard[]
  routes      Route[]

  @@unique([companyId, code])
  @@index([companyId])
  @@index([isActive])
  @@map("clients")
}

model Route {
  id             String          @id @default(cuid())
  companyId      String
  clientId       String?
  code           String          @unique
  origin         String
  destination    String
  kmEstimate     Int?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  jobs           Job[]
  jobRequests    JobRequest[]
  rateCards      RateCard[]
  routeWaypoints RouteWaypoint[]
  client         Client?         @relation(fields: [clientId], references: [id])
  company        Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([clientId])
  @@index([isActive])
  @@map("routes")
}

model Container {
  id        String   @id @default(cuid())
  companyId String
  iso       String
  size      String
  owner     String?
  checkOk   Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobs      Job[]

  @@unique([companyId, iso])
  @@index([companyId])
  @@index([size])
  @@map("containers")
}

model Job {
  id              String             @id @default(cuid())
  companyId       String
  clientId        String?
  routeId         String?
  containerId     String?
  vehicleId       String?
  driverId        String?
  assignedBy      String?
  status          JobStatus          @default(CREATED)
  jobType         JobType            @default(ONE_WAY)
  priority        Priority           @default(NORMAL)
  etaTs           DateTime?
  pickupTs        DateTime?
  dropTs          DateTime?
  specialNotes    String?
  trackingEnabled Boolean            @default(true)
  shareTrackingLink String?
  trackingStartedAt DateTime?
  lastKnownLat    Decimal?           @db.Decimal(10, 8)
  lastKnownLng    Decimal?           @db.Decimal(11, 8)
  lastKnownAddress String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  bill            Bill?
  documents       Document[]
  etaCalculations ETACalculation[]
  geofenceEvents  GeofenceEvent[]
  economics       JobEconomics?
  jobRequests     JobRequest[]
  jobUpdates      JobUpdate[]
  assignedByUser  User?              @relation("AssignedBy", fields: [assignedBy], references: [id])
  client          Client?            @relation(fields: [clientId], references: [id])
  company         Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  container       Container?         @relation(fields: [containerId], references: [id])
  driver          Driver?            @relation(fields: [driverId], references: [id])
  route           Route?             @relation(fields: [routeId], references: [id])
  vehicle         Vehicle?           @relation(fields: [vehicleId], references: [id])
  locationTracks  LocationTracking[]
  notifications   Notification[]
  pod             POD?
  routeWaypoints  RouteWaypoint[]
  statusEvents    StatusEvent[]
  tripPack        TripPack?
  waypoints       Waypoint[]
  earnings        DriverEarning[]
  trackingPermissions TrackingPermission[]

  @@index([companyId])
  @@index([status])
  @@index([clientId])
  @@index([driverId])
  @@index([vehicleId])
  @@index([createdAt])
  @@index([companyId, clientId, status], map: "jobs_company_client_status_idx")
  @@index([companyId, driverId, status], map: "jobs_company_driver_status_idx")
  @@index([companyId, status, createdAt(sort: Desc)], map: "jobs_company_status_created_idx")
  @@index([companyId, status, trackingEnabled], map: "idx_jobs_tracking_active")
  @@map("jobs")
}

model Waypoint {
  id          String       @id @default(cuid())
  jobId       String
  name        String
  type        WaypointType
  sequence    Int
  lat         Float?
  lng         Float?
  address     String?
  radiusM     Int          @default(150)
  isCompleted Boolean      @default(false)
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  job         Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([type])
  @@index([sequence])
  @@map("waypoints")
}

model LocationTracking {
  id           String   @id @default(cuid())
  jobId        String
  driverId     String
  vehicleId    String?
  lat          Decimal  @db.Decimal(10, 8)
  lng          Decimal  @db.Decimal(11, 8)
  accuracy     Decimal? @db.Decimal(10, 2)
  altitude     Decimal? @db.Decimal(10, 2)
  speed        Decimal? @db.Decimal(8, 2)
  heading      Decimal? @db.Decimal(6, 2)
  timestamp    DateTime
  batteryLevel Int?
  isManual     Boolean  @default(false)
  source       String   @default("MOBILE_GPS")
  metadata     Json?
  routeDistance Decimal? @db.Decimal(10, 2)
  routeDuration Int?
  deviceInfo   Json?
  networkType  String?
  batteryPercentage Int?
  isCharging   Boolean  @default(false)
  createdAt    DateTime @default(now())
  driver       Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  job          Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  vehicle      Vehicle? @relation(fields: [vehicleId], references: [id])

  @@index([jobId, timestamp(sort: Desc)])
  @@index([driverId, timestamp(sort: Desc)])
  @@index([jobId, driverId, timestamp(sort: Desc)], map: "idx_location_latest")
  @@map("location_tracking")
}

model Geofence {
  id        String          @id @default(cuid())
  companyId String
  name      String
  type      String
  lat       Decimal         @db.Decimal(10, 8)
  lng       Decimal         @db.Decimal(11, 8)
  radiusM   Int?
  polygon   Json?
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  events    GeofenceEvent[]

  @@index([companyId])
  @@map("geofences")
}

model GeofenceEvent {
  id           String   @id @default(cuid())
  jobId        String
  driverId     String
  geofenceId   String
  eventType    String
  lat          Decimal  @db.Decimal(10, 8)
  lng          Decimal  @db.Decimal(11, 8)
  timestamp    DateTime
  autoDetected Boolean  @default(true)
  metadata     Json?
  createdAt    DateTime @default(now())
  driver       Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  geofence     Geofence @relation(fields: [geofenceId], references: [id], onDelete: Cascade)
  job          Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId, timestamp])
  @@index([driverId, timestamp])
  @@map("geofence_events")
}

model RouteWaypoint {
  id               String    @id @default(cuid())
  jobId            String
  routeId          String
  sequence         Int
  name             String
  lat              Decimal   @db.Decimal(10, 8)
  lng              Decimal   @db.Decimal(11, 8)
  type             String    @default("CHECKPOINT")
  estimatedArrival DateTime?
  actualArrival    DateTime?
  isCompleted      Boolean   @default(false)
  metadata         Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  job              Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  route            Route     @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@index([jobId, sequence])
  @@map("route_waypoints")
}

model ETACalculation {
  id                   String   @id @default(cuid())
  jobId                String
  currentLat           Decimal  @db.Decimal(10, 8)
  currentLng           Decimal  @db.Decimal(11, 8)
  destinationLat       Decimal  @db.Decimal(10, 8)
  destinationLng       Decimal  @db.Decimal(11, 8)
  estimatedTimeMinutes Int
  estimatedDistance    Decimal  @db.Decimal(10, 2)
  trafficFactor        Decimal  @default(1.0) @db.Decimal(4, 2)
  calculationMethod    String   @default("GOOGLE_MAPS")
  confidence           Decimal  @default(0.8) @db.Decimal(4, 2)
  metadata             Json?
  createdAt            DateTime @default(now())
  job                  Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId, createdAt])
  @@map("eta_calculations")
}

model StatusEvent {
  id        String      @id @default(cuid())
  jobId     String
  code      String
  timestamp DateTime    @default(now())
  lat       Float?
  lng       Float?
  note      String?
  metadata  Json?
  source    EventSource @default(MANUAL)
  job       Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([code])
  @@index([timestamp])
  @@index([code, timestamp(sort: Desc)])
  @@index([jobId, timestamp(sort: Desc)], map: "status_events_job_timestamp_desc_idx")
  @@map("status_events")
}

model Document {
  id         String       @id @default(cuid())
  companyId  String
  jobId      String?
  type       DocumentType
  fileName   String
  fileUrl    String
  fileSize   Int?
  mimeType   String?
  ocrData    Json?
  metadata   Json?
  version    Int          @default(1)
  isOriginal Boolean      @default(true)
  createdBy  String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  company    Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  creator    User?        @relation("CreatedBy", fields: [createdBy], references: [id])
  job        Job?         @relation(fields: [jobId], references: [id])

  @@index([companyId])
  @@index([jobId])
  @@index([type])
  @@index([createdBy])
  @@map("documents")
}

model TripPack {
  id          String   @id @default(cuid())
  jobId       String   @unique
  qrCode      String
  documentIds Json?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("trip_packs")
}

model POD {
  id              String   @id @default(cuid())
  jobId           String   @unique
  recipientName   String
  signatureUrl    String?
  photoUrls       Json?
  deliveryNotes   String?
  deliveredAt     DateTime
  verificationOtp String?
  metadata        Json?
  createdAt       DateTime @default(now())
  job             Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("pods")
}

model Bill {
  id               String     @id @default(cuid())
  companyId        String
  jobId            String     @unique
  invoiceNo        String
  amount           Decimal    @db.Decimal(12, 2)
  tax              Decimal    @db.Decimal(12, 2)
  total            Decimal    @db.Decimal(12, 2)
  status           BillStatus @default(DRAFT)
  dueDate          DateTime?
  paidAt           DateTime?
  paymentMethod    String?
  paymentReference String?
  metadata         Json?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  company          Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  job              Job        @relation(fields: [jobId], references: [id])

  @@unique([companyId, invoiceNo])
  @@index([companyId])
  @@index([status])
  @@index([dueDate])
  @@map("bills")
}

model RateCard {
  id            String   @id @default(cuid())
  companyId     String
  clientId      String?
  routeId       String?
  containerSize String
  ratePerTrip   Decimal  @db.Decimal(12, 2)
  fuelSurcharge Decimal? @db.Decimal(12, 2)
  extraCharges  Json?
  isActive      Boolean  @default(true)
  validFrom     DateTime @default(now())
  validTo       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  client        Client?  @relation(fields: [clientId], references: [id])
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  route         Route?   @relation(fields: [routeId], references: [id])

  @@index([companyId])
  @@index([clientId])
  @@index([routeId])
  @@index([containerSize])
  @@index([isActive])
  @@map("rate_cards")
}

model JobEconomics {
  id                String   @id @default(cuid())
  jobId             String   @unique
  revExpected       Decimal  @db.Decimal(12, 2)
  revActual         Decimal? @db.Decimal(12, 2)
  costExpected      Decimal  @db.Decimal(12, 2)
  costActual        Decimal? @db.Decimal(12, 2)
  marginExpected    Decimal  @db.Decimal(12, 2)
  marginActual      Decimal? @db.Decimal(12, 2)
  marginPctExpected Decimal  @db.Decimal(5, 2)
  marginPctActual   Decimal? @db.Decimal(5, 2)
  breakdown         Json?
  calculatedAt      DateTime @default(now())
  updatedAt         DateTime @updatedAt
  company           Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId         String
  job               Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@map("job_economics")
}

model MaintenanceEvent {
  id          String          @id @default(cuid())
  vehicleId   String
  type        MaintenanceType
  description String?
  odoReading  Int
  cost        Decimal         @db.Decimal(12, 2)
  vendor      String?
  nextDueOdo  Int?
  nextDueDate DateTime?
  metadata    Json?
  performedAt DateTime        @default(now())
  createdAt   DateTime        @default(now())
  vehicle     Vehicle         @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([vehicleId])
  @@index([type])
  @@index([performedAt])
  @@map("maintenance_events")
}

model FuelRecord {
  id         String   @id @default(cuid())
  vehicleId  String
  liters     Decimal  @db.Decimal(10, 2)
  cost       Decimal  @db.Decimal(12, 2)
  pricePerL  Decimal  @db.Decimal(8, 2)
  odoReading Int
  station    String?
  metadata   Json?
  fueledAt   DateTime @default(now())
  createdAt  DateTime @default(now())
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([vehicleId])
  @@index([fueledAt])
  @@map("fuel_records")
}

model MaintenanceAlert {
  id            String   @id @default(cuid())
  vehicleId     String
  alertType     String
  message       String
  severity      String   @default("LOW")
  isResolved    Boolean  @default(false)
  resolvedAt    DateTime?
  triggeredBy   String?
  metadata      Json?
  createdAt     DateTime @default(now())
  triggeredUser User?    @relation(fields: [triggeredBy], references: [id])

  @@index([vehicleId])
  @@index([alertType])
  @@index([isResolved])
  @@map("maintenance_alerts")
}

model NotificationSettings {
  id             String   @id @default(cuid())
  userId         String   @unique
  emailEnabled   Boolean  @default(true)
  smsEnabled     Boolean  @default(false)
  pushEnabled    Boolean  @default(true)
  emailFrequency String   @default("IMMEDIATE")
  preferences    Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model UsageMeter {
  id         String      @id @default(cuid())
  companyId  String
  metric     UsageMetric
  count      Int         @default(0)
  period     String
  metadata   Json?
  recordedAt DateTime    @default(now())

  @@unique([companyId, metric, period])
  @@index([companyId])
  @@index([metric])
  @@index([period])
  @@map("usage_meters")
}

model JobRequest {
  id                  String               @id @default(cuid())
  companyId           String
  clientId            String?
  routeId             String?
  requestedBy         String?
  title               String
  description         String?
  priority            Priority             @default(NORMAL)
  jobType             JobType              @default(ONE_WAY)
  requestedPickupTs   DateTime?
  requestedDeliveryTs DateTime?
  pickupAddress       String?
  pickupLat           Float?
  pickupLng           Float?
  deliveryAddress     String?
  deliveryLat         Float?
  deliveryLng         Float?
  containerSize       String?
  cargoDescription    String?
  specialInstructions String?
  status              JobRequestStatus     @default(PENDING)
  reviewedBy          String?
  reviewedAt          DateTime?
  reviewNotes         String?
  convertedToJobId    String?
  metadata            Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  client              Client?              @relation(fields: [clientId], references: [id])
  company             Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  convertedToJob      Job?                 @relation(fields: [convertedToJobId], references: [id])
  route               Route?               @relation(fields: [routeId], references: [id])
  documents           JobRequestDocument[]
  updates             JobRequestUpdate[]

  @@index([companyId])
  @@index([clientId])
  @@index([routeId])
  @@index([status])
  @@index([createdAt])
  @@index([requestedPickupTs])
  @@map("job_requests")
}

model JobRequestUpdate {
  id            String     @id @default(cuid())
  jobRequestId  String
  updateType    String
  title         String
  description   String?
  updatedBy     String
  isVisible     Boolean    @default(true)
  metadata      Json?
  createdAt     DateTime   @default(now())
  jobRequest    JobRequest @relation(fields: [jobRequestId], references: [id], onDelete: Cascade)
  updatedByUser User       @relation(fields: [updatedBy], references: [id])

  @@index([jobRequestId, createdAt])
  @@index([updatedBy])
  @@map("job_request_updates")
}

model JobRequestDocument {
  id             String     @id @default(cuid())
  jobRequestId   String
  type           String
  fileName       String
  fileUrl        String
  fileSize       Int?
  mimeType       String?
  uploadedBy     String
  isRequired     Boolean    @default(false)
  metadata       Json?
  createdAt      DateTime   @default(now())
  jobRequest     JobRequest @relation(fields: [jobRequestId], references: [id], onDelete: Cascade)
  uploadedByUser User       @relation(fields: [uploadedBy], references: [id])

  @@index([jobRequestId])
  @@index([uploadedBy])
  @@map("job_request_documents")
}

model JobUpdate {
  id                String         @id @default(cuid())
  jobId             String
  updateType        String
  title             String
  description       String?
  status            JobStatus?
  location          Json?
  eta               DateTime?
  severity          String?
  isVisibleToClient Boolean        @default(true)
  updatedBy         String
  metadata          Json?
  createdAt         DateTime       @default(now())
  job               Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)
  updatedByUser     User           @relation(fields: [updatedBy], references: [id])
  notifications     Notification[] @relation("JobUpdateNotifications")

  @@index([jobId, createdAt])
  @@index([updatedBy])
  @@index([updateType])
  @@index([severity])
  @@map("job_updates")
}

model Notification {
  id            String             @id @default(cuid())
  companyId     String
  recipientId   String
  recipientType String             @default("USER")
  type          NotificationType
  title         String
  message       String
  actionUrl     String?
  jobId         String?
  jobRequestId  String?
  jobUpdateId   String?
  status        NotificationStatus @default(PENDING)
  readAt        DateTime?
  deliveredAt   DateTime?
  channels      Json?
  metadata      Json?
  createdAt     DateTime           @default(now())
  company       Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  job           Job?               @relation(fields: [jobId], references: [id])
  jobUpdate     JobUpdate?         @relation("JobUpdateNotifications", fields: [jobUpdateId], references: [id])

  @@index([companyId])
  @@index([recipientId])
  @@index([status])
  @@index([type])
  @@index([jobId])
  @@index([createdAt])
  @@map("notifications")
}

// ============================================
// NEW MODELS FOR DRIVER TRACKING V2
// ============================================

model DriverSession {
  id           String   @id @default(cuid())
  driverId     String
  companyId    String
  token        String
  deviceId     String?
  deviceInfo   Json?
  ipAddress    String?  @db.VarChar(45)
  userAgent    String?
  loginAt      DateTime @default(now())
  lastActiveAt DateTime @default(now())
  logoutAt     DateTime?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  driver       Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([token], map: "idx_driver_session_token")
  @@index([driverId, isActive], map: "idx_driver_session_active")
  @@index([companyId, isActive], map: "idx_driver_session_company")
  @@map("driver_sessions")
}

model DriverEarning {
  id              String   @id @default(cuid())
  driverId        String
  jobId           String
  companyId       String
  baseAmount      Decimal  @default(0) @db.Decimal(12, 2)
  distanceBonus   Decimal? @default(0) @db.Decimal(12, 2)
  timeBonus       Decimal? @default(0) @db.Decimal(12, 2)
  nightShiftBonus Decimal? @default(0) @db.Decimal(12, 2)
  totalAmount     Decimal  @default(0) @db.Decimal(12, 2)
  currency        String?  @default("LKR") @db.VarChar(3)
  status          String?  @default("PENDING") @db.VarChar(20)
  approvedBy      String?
  approvedAt      DateTime?
  paidAt          DateTime?
  paymentRef      String?
  earnedAt        DateTime @default(now())
  createdAt       DateTime @default(now())
  driver          Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  job             Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([driverId, earnedAt(sort: Desc)], map: "idx_earnings_driver")
  @@index([jobId], map: "idx_earnings_job")
  @@index([status, companyId], map: "idx_earnings_status")
  @@index([driverId, earnedAt], map: "idx_earnings_month")
  @@map("driver_earnings")
}

model TrackingState {
  id              String   @id @default(cuid())
  driverId        String   @unique
  jobId           String?
  companyId       String
  currentLat      Decimal? @db.Decimal(10, 8)
  currentLng      Decimal? @db.Decimal(11, 8)
  currentSpeed    Decimal? @db.Decimal(8, 2)
  currentHeading  Decimal? @db.Decimal(6, 2)
  currentAccuracy Decimal? @db.Decimal(10, 2)
  lastUpdateAt    DateTime @default(now())
  isMoving        Boolean  @default(false)
  totalDistance   Decimal? @default(0) @db.Decimal(10, 2)
  totalDuration   Int?     @default(0)
  averageSpeed    Decimal? @default(0) @db.Decimal(8, 2)
  maxSpeed        Decimal? @default(0) @db.Decimal(8, 2)
  metadata        Json?
  driver          Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([driverId], map: "idx_tracking_state_driver")
  @@index([jobId], map: "idx_tracking_state_job")
  @@index([companyId, isMoving], map: "idx_tracking_state_company")
  @@map("tracking_state")
}

model TrackingPermission {
  id         String   @id @default(cuid())
  jobId      String
  entityType String   @db.VarChar(20)
  entityId   String?
  canView    Boolean  @default(true)
  canShare   Boolean  @default(false)
  expiresAt  DateTime?
  createdAt  DateTime @default(now())
  job        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId], map: "idx_tracking_perm_job")
  @@index([entityType, entityId], map: "idx_tracking_perm_entity")
  @@map("tracking_permissions")
}

// ============================================
// ENUMS
// ============================================

enum JobStatus {
  CREATED
  ASSIGNED
  IN_TRANSIT
  AT_PICKUP
  LOADED
  AT_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum JobType {
  ONE_WAY
  ROUND_TRIP
  MULTI_STOP
  EXPORT
  IMPORT
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum WaypointType {
  PICKUP
  DELIVERY
  CHECKPOINT
  REST_STOP
  YARD
  PORT
}

enum EventSource {
  MANUAL
  GEOFENCE
  API
  SYSTEM
}

enum DocumentType {
  BOL
  INVOICE
  DELIVERY_NOTE
  GATE_PASS
  CUSTOMS
  INSURANCE
  PHOTO
  SIGNATURE
  RELEASE_ORDER
  CDN
  LOADING_PASS
  FCL_DOCUMENT
  OTHER
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  INSPECTION
  OIL_CHANGE
  TIRE_REPLACEMENT
  BRAKE_SERVICE
  ENGINE_REPAIR
  TRANSMISSION
  ELECTRICAL
  BODY_WORK
  OTHER
}

enum UsageMetric {
  TRIP_PACK_GENERATED
  DOCUMENT_PROCESSED
  RAG_QUERY
  API_CALL
  STORAGE_GB
  BANDWIDTH_GB
}

enum JobRequestStatus {
  PENDING
  UNDER_REVIEW
  ACCEPTED
  DECLINED
  CANCELLED
}

enum NotificationType {
  JOB_REQUEST_SUBMITTED
  JOB_REQUEST_REVIEWED
  JOB_REQUEST_ACCEPTED
  JOB_REQUEST_DECLINED
  JOB_ASSIGNED
  JOB_STARTED
  JOB_UPDATE
  JOB_COMPLETED
  JOB_DELAYED
  JOB_EMERGENCY
  ETA_UPDATED
  DOCUMENT_UPLOADED
  SYSTEM_ALERT
}

enum NotificationStatus {
  PENDING
  DELIVERED
  READ
  FAILED
}

enum BillStatus {
  DRAFT
  ISSUED
  SENT
  PAID
  OVERDUE
  CANCELLED
}