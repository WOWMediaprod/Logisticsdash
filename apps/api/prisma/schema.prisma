generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id            String         @id @default(cuid())
  name          String
  subdomain     String         @unique
  settings      Json           @default("{}")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  clients       Client[]
  containers    Container[]
  documents     Document[]
  drivers       Driver[]
  geofences     Geofence[]
  jobRequests   JobRequest[]
  jobs          Job[]
  notifications Notification[]
  ragDocuments  RagDocument[]
  rateCards     RateCard[]
  routes        Route[]
  users         User[]
  vehicles      Vehicle[]

  @@index([subdomain])
  @@map("companies")
}

model User {
  id                   String               @id @default(cuid())
  companyId            String
  email                String               @unique
  password             String
  role                 Role
  firstName            String
  lastName             String
  isActive             Boolean              @default(true)
  lastLogin            DateTime?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  createdDocuments     Document[]           @relation("CreatedBy")
  jobRequestDocuments  JobRequestDocument[]
  jobRequestUpdates    JobRequestUpdate[]
  requestedJobRequests JobRequest[]         @relation("RequestedBy")
  reviewedJobRequests  JobRequest[]         @relation("ReviewedBy")
  jobUpdates           JobUpdate[]
  assignedJobs         Job[]                @relation("AssignedBy")
  notifications        Notification[]
  company              Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([email])
  @@index([companyId, isActive, lastLogin(sort: Desc)], map: "users_company_active_lastlogin_idx")
  @@map("users")
}

model Vehicle {
  id             String             @id @default(cuid())
  companyId      String
  regNo          String
  class          String
  make           String?
  model          String?
  year           Int?
  kmpl           Float              @default(8.0)
  leasePerDay    Decimal            @db.Decimal(10, 2)
  maintPerKm     Decimal            @db.Decimal(10, 4)
  currentOdo     Int                @default(0)
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  fuelRecords    FuelRecord[]
  jobs           Job[]
  locationTracks LocationTracking[]
  maintenance    MaintenanceEvent[]
  company        Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, regNo])
  @@index([companyId])
  @@index([isActive])
  @@map("vehicles")
}

model Driver {
  id             String             @id @default(cuid())
  companyId      String
  name           String
  licenseNo      String?
  phone          String?
  email          String?
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  company        Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  geofenceEvents GeofenceEvent[]
  jobs           Job[]
  locationTracks LocationTracking[]

  @@unique([companyId, licenseNo])
  @@index([companyId])
  @@index([isActive])
  @@map("drivers")
}

model Client {
  id          String       @id @default(cuid())
  companyId   String
  name        String
  code        String?
  terms       String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobRequests JobRequest[]
  jobs        Job[]
  rateCards   RateCard[]
  routes      Route[]

  @@unique([companyId, code])
  @@index([companyId])
  @@index([isActive])
  @@map("clients")
}

model Route {
  id             String          @id @default(cuid())
  companyId      String
  clientId       String?
  code           String          @unique
  origin         String
  destination    String
  kmEstimate     Int?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  jobs           Job[]
  jobRequests    JobRequest[]
  rateCards      RateCard[]
  routeWaypoints RouteWaypoint[]
  client         Client?         @relation(fields: [clientId], references: [id])
  company        Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([clientId])
  @@index([isActive])
  @@map("routes")
}

model Container {
  id        String   @id @default(cuid())
  companyId String
  iso       String
  size      String
  owner     String?
  checkOk   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobs      Job[]

  @@unique([companyId, iso])
  @@index([companyId])
  @@index([size])
  @@map("containers")
}

model Job {
  id              String             @id @default(cuid())
  companyId       String
  clientId        String?
  routeId         String?
  containerId     String?
  vehicleId       String?
  driverId        String?
  assignedBy      String?
  status          JobStatus          @default(CREATED)
  jobType         JobType            @default(ONE_WAY)
  priority        Priority           @default(NORMAL)
  etaTs           DateTime?
  pickupTs        DateTime?
  dropTs          DateTime?
  specialNotes    String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  bill            Bill?
  documents       Document[]
  etaCalculations ETACalculation[]
  geofenceEvents  GeofenceEvent[]
  economics       JobEconomics?
  jobRequests     JobRequest[]
  jobUpdates      JobUpdate[]
  assignedByUser  User?              @relation("AssignedBy", fields: [assignedBy], references: [id])
  client          Client?            @relation(fields: [clientId], references: [id])
  company         Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  container       Container?         @relation(fields: [containerId], references: [id])
  driver          Driver?            @relation(fields: [driverId], references: [id])
  route           Route?             @relation(fields: [routeId], references: [id])
  vehicle         Vehicle?           @relation(fields: [vehicleId], references: [id])
  locationTracks  LocationTracking[]
  notifications   Notification[]
  pod             POD?
  routeWaypoints  RouteWaypoint[]
  statusEvents    StatusEvent[]
  tripPack        TripPack?
  waypoints       Waypoint[]

  @@index([companyId])
  @@index([status])
  @@index([clientId])
  @@index([driverId])
  @@index([vehicleId])
  @@index([createdAt])
  @@index([companyId, clientId, status], map: "jobs_company_client_status_idx")
  @@index([companyId, driverId, status], map: "jobs_company_driver_status_idx")
  @@index([companyId, status, createdAt(sort: Desc)], map: "jobs_company_status_created_idx")
  @@map("jobs")
}

model Waypoint {
  id          String       @id @default(cuid())
  jobId       String
  name        String
  type        WaypointType
  sequence    Int
  lat         Float?
  lng         Float?
  address     String?
  radiusM     Int          @default(150)
  isCompleted Boolean      @default(false)
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  job         Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([type])
  @@index([sequence])
  @@map("waypoints")
}

model LocationTracking {
  id           String   @id @default(cuid())
  jobId        String
  driverId     String
  vehicleId    String?
  lat          Decimal  @db.Decimal(10, 8)
  lng          Decimal  @db.Decimal(11, 8)
  accuracy     Decimal? @db.Decimal(10, 2)
  altitude     Decimal? @db.Decimal(10, 2)
  speed        Decimal? @db.Decimal(8, 2)
  heading      Decimal? @db.Decimal(6, 2)
  timestamp    DateTime
  batteryLevel Int?
  isManual     Boolean  @default(false)
  source       String   @default("MOBILE_GPS")
  metadata     Json?
  createdAt    DateTime @default(now())
  driver       Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  job          Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  vehicle      Vehicle? @relation(fields: [vehicleId], references: [id])

  @@index([jobId, timestamp])
  @@index([driverId, timestamp])
  @@index([timestamp])
  @@index([driverId, timestamp(sort: Desc)], map: "location_tracking_driver_latest_idx")
  @@index([jobId, timestamp(sort: Desc)], map: "location_tracking_job_timestamp_desc_idx")
  @@map("location_tracking")
}

model Geofence {
  id          String          @id @default(cuid())
  companyId   String
  name        String
  description String?
  type        String          @default("CIRCLE")
  centerLat   Decimal         @db.Decimal(10, 8)
  centerLng   Decimal         @db.Decimal(11, 8)
  radius      Decimal         @default(100) @db.Decimal(10, 2)
  polygon     Json?
  isActive    Boolean         @default(true)
  metadata    Json?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  events      GeofenceEvent[]
  company     Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, isActive])
  @@map("geofences")
}

model GeofenceEvent {
  id           String   @id @default(cuid())
  jobId        String
  driverId     String
  geofenceId   String
  eventType    String
  lat          Decimal  @db.Decimal(10, 8)
  lng          Decimal  @db.Decimal(11, 8)
  timestamp    DateTime
  autoDetected Boolean  @default(true)
  metadata     Json?
  createdAt    DateTime @default(now())
  driver       Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  geofence     Geofence @relation(fields: [geofenceId], references: [id], onDelete: Cascade)
  job          Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId, timestamp])
  @@index([driverId, timestamp])
  @@map("geofence_events")
}

model RouteWaypoint {
  id               String    @id @default(cuid())
  jobId            String
  routeId          String
  sequence         Int
  name             String
  lat              Decimal   @db.Decimal(10, 8)
  lng              Decimal   @db.Decimal(11, 8)
  type             String    @default("CHECKPOINT")
  estimatedArrival DateTime?
  actualArrival    DateTime?
  isCompleted      Boolean   @default(false)
  metadata         Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  job              Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  route            Route     @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@index([jobId, sequence])
  @@map("route_waypoints")
}

model ETACalculation {
  id                   String   @id @default(cuid())
  jobId                String
  currentLat           Decimal  @db.Decimal(10, 8)
  currentLng           Decimal  @db.Decimal(11, 8)
  destinationLat       Decimal  @db.Decimal(10, 8)
  destinationLng       Decimal  @db.Decimal(11, 8)
  estimatedTimeMinutes Int
  estimatedDistance    Decimal  @db.Decimal(10, 2)
  trafficFactor        Decimal  @default(1.0) @db.Decimal(4, 2)
  calculationMethod    String   @default("GOOGLE_MAPS")
  confidence           Decimal  @default(0.8) @db.Decimal(4, 2)
  metadata             Json?
  createdAt            DateTime @default(now())
  job                  Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId, createdAt])
  @@map("eta_calculations")
}

model StatusEvent {
  id        String      @id @default(cuid())
  jobId     String
  code      String
  timestamp DateTime    @default(now())
  lat       Float?
  lng       Float?
  note      String?
  metadata  Json?
  source    EventSource @default(MANUAL)
  job       Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([code])
  @@index([timestamp])
  @@index([code, timestamp(sort: Desc)])
  @@index([jobId, timestamp(sort: Desc)], map: "status_events_job_timestamp_desc_idx")
  @@map("status_events")
}

model Document {
  id         String       @id @default(cuid())
  companyId  String
  jobId      String?
  type       DocumentType
  fileName   String
  fileUrl    String
  fileSize   Int?
  mimeType   String?
  ocrData    Json?
  metadata   Json?
  version    Int          @default(1)
  isOriginal Boolean      @default(true)
  createdBy  String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  company    Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  creator    User?        @relation("CreatedBy", fields: [createdBy], references: [id])
  job        Job?         @relation(fields: [jobId], references: [id])

  @@index([companyId])
  @@index([jobId])
  @@index([type])
  @@index([createdAt])
  @@index([companyId, type, createdAt(sort: Desc)], map: "documents_company_type_created_idx")
  @@map("documents")
}

model TripPack {
  id         String    @id @default(cuid())
  jobId      String    @unique
  bundleUrl  String
  qrToken    String    @unique
  qrCodeUrl  String?
  expiresAt  DateTime?
  accessCode String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  job        Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([qrToken])
  @@index([expiresAt])
  @@map("trip_packs")
}

model POD {
  id            String    @id @default(cuid())
  jobId         String    @unique
  signatureUrl  String?
  photos        Json?
  sealNo        String?
  receiverName  String?
  receiverPhone String?
  notes         String?
  timestamp     DateTime?
  lat           Float?
  lng           Float?
  isComplete    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  job           Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([isComplete])
  @@map("pod")
}

model RateCard {
  id                   String    @id @default(cuid())
  companyId            String
  clientId             String?
  routeId              String?
  containerSize        String
  baseRate             Decimal   @db.Decimal(10, 2)
  fuelSurchargePct     Decimal   @default(0) @db.Decimal(5, 2)
  freeTimeHours        Int       @default(0)
  detentionRatePerHour Decimal   @default(0) @db.Decimal(10, 2)
  waitingRatePerHour   Decimal   @default(0) @db.Decimal(10, 2)
  tollsFlat            Decimal   @default(0) @db.Decimal(10, 2)
  effectiveFrom        DateTime?
  effectiveTo          DateTime?
  isActive             Boolean   @default(true)
  version              Int       @default(1)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  client               Client?   @relation(fields: [clientId], references: [id])
  company              Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  route                Route?    @relation(fields: [routeId], references: [id])

  @@index([companyId])
  @@index([clientId])
  @@index([routeId])
  @@index([containerSize])
  @@index([isActive])
  @@map("rate_cards")
}

model JobEconomics {
  id                String   @id @default(cuid())
  jobId             String   @unique
  revExpected       Decimal  @db.Decimal(12, 2)
  revActual         Decimal? @db.Decimal(12, 2)
  costExpected      Decimal  @db.Decimal(12, 2)
  costActual        Decimal? @db.Decimal(12, 2)
  marginExpected    Decimal  @db.Decimal(12, 2)
  marginActual      Decimal? @db.Decimal(12, 2)
  marginPctExpected Decimal  @db.Decimal(5, 2)
  marginPctActual   Decimal? @db.Decimal(5, 2)
  variance          Json?
  rateCardUsed      String?
  calculatedAt      DateTime @default(now())
  updatedAt         DateTime @updatedAt
  job               Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@map("job_economics")
}

model MaintenanceEvent {
  id              String          @id @default(cuid())
  vehicleId       String
  eventDate       DateTime
  odometerKm      Int
  serviceType     MaintenanceType
  description     String?
  partsUsed       String?
  laborHours      Float?
  notes           String?
  costAmount      Decimal?        @db.Decimal(10, 2)
  costCurrency    String?         @default("INR")
  vendorName      String?
  nextServiceKm   Int?
  nextServiceDate DateTime?
  isCompleted     Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  vehicle         Vehicle         @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([vehicleId])
  @@index([serviceType])
  @@index([eventDate])
  @@index([nextServiceDate])
  @@map("maintenance_events")
}

model FuelRecord {
  id           String   @id @default(cuid())
  vehicleId    String
  date         DateTime
  litres       Decimal? @db.Decimal(8, 2)
  costAmount   Decimal? @db.Decimal(10, 2)
  costPerLitre Decimal? @db.Decimal(6, 2)
  odometerKm   Int?
  routeClass   String?
  fuelStation  String?
  receiptUrl   String?
  notes        String?
  createdAt    DateTime @default(now())
  vehicle      Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([vehicleId])
  @@index([date])
  @@index([routeClass])
  @@map("fuel_records")
}

model RagDocument {
  id          String     @id @default(cuid())
  companyId   String
  fileName    String
  fileUrl     String
  fileSize    Int?
  mimeType    String?
  title       String?
  description String?
  tags        String[]   @default([])
  metadata    Json?
  isProcessed Boolean    @default(false)
  processedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  chunks      RagChunk[]
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([isProcessed])
  @@index([tags])
  @@map("rag_documents")
}

model RagChunk {
  id         String      @id @default(cuid())
  companyId  String
  documentId String
  text       String
  tokens     Int
  embedding  Bytes?
  chunkIndex Int
  startChar  Int?
  endChar    Int?
  metadata   Json?
  createdAt  DateTime    @default(now())
  document   RagDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([documentId])
  @@index([chunkIndex])
  @@map("rag_chunks")
}

model UsageMeter {
  id         String      @id @default(cuid())
  companyId  String
  metric     UsageMetric
  value      Int
  period     String
  metadata   Json?
  recordedAt DateTime    @default(now())

  @@unique([companyId, metric, period])
  @@index([companyId])
  @@index([metric])
  @@index([period])
  @@map("usage_meters")
}

model JobRequest {
  id                  String               @id @default(cuid())
  companyId           String
  clientId            String?
  routeId             String?
  requestedBy         String?
  title               String
  description         String?
  priority            Priority             @default(NORMAL)
  jobType             JobType              @default(ONE_WAY)
  requestedPickupTs   DateTime?
  requestedDropTs     DateTime?
  pickupAddress       String
  deliveryAddress     String
  pickupLat           Decimal?             @db.Decimal(10, 8)
  pickupLng           Decimal?             @db.Decimal(11, 8)
  deliveryLat         Decimal?             @db.Decimal(10, 8)
  deliveryLng         Decimal?             @db.Decimal(11, 8)
  containerType       String?
  specialRequirements String?
  estimatedValue      Decimal?             @db.Decimal(12, 2)
  status              JobRequestStatus     @default(PENDING)
  reviewedBy          String?
  reviewedAt          DateTime?
  reviewNotes         String?
  jobId               String?
  lorryNumber         String?
  metadata            Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  documents           JobRequestDocument[]
  updates             JobRequestUpdate[]
  client              Client?              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  company             Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  job                 Job?                 @relation(fields: [jobId], references: [id])
  route               Route?               @relation(fields: [routeId], references: [id])
  requestedByUser     User?                @relation("RequestedBy", fields: [requestedBy], references: [id])
  reviewedByUser      User?                @relation("ReviewedBy", fields: [reviewedBy], references: [id])
  notifications       Notification[]       @relation("JobRequestNotifications")

  @@index([companyId])
  @@index([clientId])
  @@index([routeId])
  @@index([status])
  @@index([createdAt])
  @@index([requestedPickupTs])
  @@map("job_requests")
}

model JobRequestUpdate {
  id            String     @id @default(cuid())
  jobRequestId  String
  updateType    String
  title         String
  description   String?
  updatedBy     String
  isVisible     Boolean    @default(true)
  metadata      Json?
  createdAt     DateTime   @default(now())
  jobRequest    JobRequest @relation(fields: [jobRequestId], references: [id], onDelete: Cascade)
  updatedByUser User       @relation(fields: [updatedBy], references: [id])

  @@index([jobRequestId, createdAt])
  @@index([updatedBy])
  @@map("job_request_updates")
}

model JobRequestDocument {
  id             String     @id @default(cuid())
  jobRequestId   String
  type           String
  fileName       String
  fileUrl        String
  fileSize       Int?
  mimeType       String?
  uploadedBy     String
  isRequired     Boolean    @default(false)
  metadata       Json?
  createdAt      DateTime   @default(now())
  jobRequest     JobRequest @relation(fields: [jobRequestId], references: [id], onDelete: Cascade)
  uploadedByUser User       @relation(fields: [uploadedBy], references: [id])

  @@index([jobRequestId])
  @@index([uploadedBy])
  @@map("job_request_documents")
}

model JobUpdate {
  id                String         @id @default(cuid())
  jobId             String
  updateType        String
  title             String
  description       String?
  status            JobStatus?
  location          Json?
  eta               DateTime?
  severity          String?
  isVisibleToClient Boolean        @default(true)
  updatedBy         String
  metadata          Json?
  createdAt         DateTime       @default(now())
  job               Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)
  updatedByUser     User           @relation(fields: [updatedBy], references: [id])
  notifications     Notification[] @relation("JobUpdateNotifications")

  @@index([jobId, createdAt])
  @@index([updatedBy])
  @@index([updateType])
  @@index([severity])
  @@map("job_updates")
}

model Notification {
  id            String             @id @default(cuid())
  companyId     String
  recipientId   String
  recipientType String             @default("USER")
  type          NotificationType
  title         String
  message       String
  actionUrl     String?
  jobId         String?
  jobRequestId  String?
  jobUpdateId   String?
  status        NotificationStatus @default(PENDING)
  readAt        DateTime?
  deliveredAt   DateTime?
  channels      Json
  metadata      Json?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  company       Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  job           Job?               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobRequest    JobRequest?        @relation("JobRequestNotifications", fields: [jobRequestId], references: [id], onDelete: Cascade)
  jobUpdate     JobUpdate?         @relation("JobUpdateNotifications", fields: [jobUpdateId], references: [id], onDelete: Cascade)
  recipient     User               @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([recipientId, status])
  @@index([type])
  @@index([createdAt])
  @@index([jobId])
  @@index([jobRequestId])
  @@map("notifications")
}

model AuditLog {
  id         String   @id @default(cuid())
  companyId  String?
  userId     String?
  action     String
  resource   String
  resourceId String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  @@index([companyId])
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([companyId, action, timestamp(sort: Desc)], map: "audit_logs_company_action_timestamp_idx")
  @@index([resource, resourceId, timestamp(sort: Desc)], map: "audit_logs_resource_timestamp_idx")
  @@map("audit_logs")
}

model Bill {
  id                  String     @id @default(cuid())
  companyId           String
  jobId               String     @unique
  billNumber          String     @unique
  amount              Decimal    @db.Decimal(12, 2)
  currency            String     @default("INR")
  status              BillStatus @default(DRAFT)
  issuedDate          DateTime?
  dueDate             DateTime?
  paidDate            DateTime?
  attachedDocumentIds Json?
  notes               String?
  sentToClient        Boolean    @default(false)
  sentAt              DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  job                 Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([jobId])
  @@index([status])
  @@index([billNumber])
  @@index([issuedDate])
  @@map("bills")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum Role {
  ADMIN
  DISPATCHER
  VIEWER
  DRIVER
  PORT_OFFICER
}

enum JobStatus {
  CREATED
  ASSIGNED
  IN_TRANSIT
  AT_PICKUP
  LOADED
  AT_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum JobType {
  ONE_WAY
  ROUND_TRIP
  MULTI_STOP
  EXPORT
  IMPORT
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum WaypointType {
  PICKUP
  DELIVERY
  CHECKPOINT
  REST_STOP
  YARD
  PORT
}

enum EventSource {
  MANUAL
  GEOFENCE
  API
  SYSTEM
}

enum DocumentType {
  BOL
  INVOICE
  DELIVERY_NOTE
  GATE_PASS
  CUSTOMS
  INSURANCE
  PHOTO
  SIGNATURE
  RELEASE_ORDER
  CDN
  LOADING_PASS
  FCL_DOCUMENT
  OTHER
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  INSPECTION
  OIL_CHANGE
  TIRE_REPLACEMENT
  BRAKE_SERVICE
  ENGINE_REPAIR
  TRANSMISSION
  ELECTRICAL
  BODY_WORK
  OTHER
}

enum UsageMetric {
  TRIP_PACK_GENERATED
  DOCUMENT_PROCESSED
  RAG_QUERY
  API_CALL
  STORAGE_GB
  BANDWIDTH_GB
}

enum JobRequestStatus {
  PENDING
  UNDER_REVIEW
  ACCEPTED
  DECLINED
  CANCELLED
}

enum NotificationType {
  JOB_REQUEST_SUBMITTED
  JOB_REQUEST_REVIEWED
  JOB_REQUEST_ACCEPTED
  JOB_REQUEST_DECLINED
  JOB_ASSIGNED
  JOB_STARTED
  JOB_UPDATE
  JOB_COMPLETED
  JOB_DELAYED
  JOB_EMERGENCY
  ETA_UPDATED
  DOCUMENT_UPLOADED
  SYSTEM_ALERT
}

enum NotificationStatus {
  PENDING
  DELIVERED
  READ
  FAILED
}

enum BillStatus {
  DRAFT
  ISSUED
  SENT
  PAID
  OVERDUE
  CANCELLED
}
